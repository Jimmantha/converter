<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>DWG to JPEG Conversion</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous"
    />
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"
      integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.css"
      integrity="sha512-2eMmukTZtvwlfQoG8ztapwAH5fXaQBzaMqdljLopRSA0i6YKM8kBAOrSSykxu9NN9HrtD45lIqfONLII2AFL/Q=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/croppie/2.6.5/croppie.min.js"
      integrity="sha512-Gs+PsXsGkmr+15rqObPJbenQ2wB3qYvTHuJO6YJzPe/dTLvhy0fmae2BcnaozxDo5iaF8emzmCZWbQ1XXiX2Ig=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/imagemapster/1.8.0/jquery.imagemapster.min.js"
      integrity="sha512-18b1YKEQCvv8P4pvvf1lFmJIYLjU6gqzz8Cw+J/Q5lFL5bf56QtK8xMLH/7Vvv+FGRxscyeP7G5pq2AgtQEyAA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"
      integrity="sha512-q+4liFwdPC/bNdhUpZx6aXDx/h77yEQtn4I1slHydcbZK34nLaR3cAeYSJshoxIOq3mjEf7xJE8YWIUHMn+oCQ=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    ></script>
    <script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
    <link href="./stylesheet.css" rel="stylesheet" />
  </head>

  <body>
    <button
      type="button"
      class="btn btn-primary mt-5 ms-3"
      data-bs-toggle="modal"
      data-bs-target="#exampleModal"
    >
      upload floorplan
    </button>

    <!-- Modal -->
    <div
      class="modal fade flex"
      id="exampleModal"
      tabindex="-1"
      aria-labelledby="exampleModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h1 class="modal-title fs-5" id="exampleModalLabel">
              FloorPlan import
            </h1>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <div>
              <div class="flex">
                <input type="file" id="fileInput" accept=".pdf" />
                Page Number:
                <input type="number" id="pageNumber" />
                <div class="justify-content-end">
                  <button id="upload">Upload</button>
                </div>
                <img src="#" class="mt-3" alt="upload Image" id="picture" />
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <div class="hstack">
              <div class="hstack gap-3">
                <button class="btn btn-warning" id="rotateLeft">
                  rotate left
                </button>
                <button id="rotateRight" class="btn btn-warning">
                  rotate Right
                </button>
              </div>
            </div>
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
              onclick="cropImage()"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
    <div class="table">
      <div class="row">
        <div class="col-6">
          <div>
            <div class="col-6 ms-5 mt-5">
              <img
                id="new-floorplan"
                class="p-6 m-6 z-0"
                src="https://placehold.co/600x400"
                usemap="#imagemap"
                style="opacity: 0.5; position: absolute"
              />
              <canvas
                id="shadecanvas"
                style="
                  position: relative;
                  background-color: white;
                  height: 400px;
                  width: 600px;
                  z-index: 1;
                "
              ></canvas>
              <div class="table" style="position: relative">
                <div class="row">
                  <div class="col">
                    <form>
                      <div style="height: 30px"><b>Zone selection</b></div>
                      <input
                        type="radio"
                        id="Zone1"
                        name="zone"
                        value="Zone1"
                      />
                      <label for="Zone1">Zone1</label><br />
                      <input
                        type="radio"
                        id="Zone2"
                        name="zone"
                        value="Zone2"
                      />
                      <label for="Zone2">Zone2</label><br />
                      <input
                        type="radio"
                        id="Zone3"
                        name="zone"
                        value="Zone3"
                      />
                      <label for="Zone3">Zone3</label>
                    </form>
                  </div>
                  <div class="col">
                    <h2 id="mouseCoordinates">
                      Mouse is positioned at X:<span id="x"></span>, Y:<span
                        id="y"
                      ></span>
                    </h2>
                  </div>
                </div>
                <div>
                  <input
                    type="button"
                    style="width: 200px"
                    value="update"
                    id="update"
                  />
                  <span class="row justify-content-end">
                    <input
                      type="button"
                      style="width: 200px"
                      value="submit"
                      id="submit"
                    />
                  </span>
                </div>
              </div>
            </div>
            <span style="opacity: 0">s</span>
            <map name="imagemap" id="map" class="opacity"> </map>
          </div>
        </div>
        <div class="col-5">
          <table class="table m-5" id="mytable">
            <thead>
              <tr>
                <th>Sensor ID</th>
                <th>sensor type</th>
                <th>Graph type</th>
                <th>Category</th>
              </tr>
            </thead>
          </table>
        </div>
      </div>
    </div>

    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"
    ></script>
    <script>
      var imageData;
      function reinitializeMapster() {
        $("img").mapster(
          (options = {
            stroke: true,
            fillColor: "222222",
            fillOpacity: 0.3,
          })
        );
        $("#mapster_el").css("opacity", "0.5");
      }
      var el = document.getElementById("picture");
      var vanilla = new Croppie(el, {
        viewport: { width: 600, height: 400 },
        boundary: { width: 1000, height: 800 },
        showZoomer: true,
        enableResize: false,
        enableOrientation: true,
      });
      var newImage;
      $(".cr-slider").attr({ min: 0.5, max: 4.0 });

      //ties new image to variable newImage to be use when modal closes
      function cropImage() {
        vanilla
          .result({
            type: "blob", // Use canvas for better quality
            size: "viewport", // Use original size of the cropped image
          })
          .then(function (croppedImage) {
            newImage = croppedImage;
          });
      }
      $("#rotateLeft").click(function () {
        vanilla.rotate(-90);
      });
      $("#rotateRight").click(function () {
        vanilla.rotate(90);
      });
      $("#upload").click(function () {
        console.log("uploading");
        convertTojpg();
      });

      function convertTojpg() {
        var fileInput = document.getElementById("fileInput");
        var pageNumberInput = document.getElementById("pageNumber");
        var pageNumber = parseInt(pageNumberInput.value);
        var file = fileInput.files[0];

        var url = URL.createObjectURL(file);
        var pdf = new pdfjsLib.getDocument(url);
        pdf.promise.then(function (pdf) {
          console.log("Number of pages: " + pdf.numPages);

          pdf.getPage(pageNumber).then(function (page) {
            var viewport = page.getViewport({ scale: 1 });
            var canvas = document.createElement("canvas");
            var context = canvas.getContext("2d");
            canvas.height = viewport.height;
            canvas.width = viewport.width;

            var renderContext = {
              canvasContext: context,
              viewport: viewport,
            };
            var renderTask = page.render(renderContext);

            renderTask.promise.then(function () {
              var imageData = canvas.toDataURL("image/jpeg");
              // Use the imageData as needed
              console.log(imageData);
              uploadImage(imageData);
            });
          });
        });
      }

      function uploadImage(imageData) {
        try {
          var imageBase64 = imageData; //image data base 64
          imageView = document.getElementById("picture");
          picture.setAttribute("src", imageBase64);
          reinitializeMapster();

          vanilla.bind({
            url: imageBase64,
          });
          $("#exampleModal").off("hidden.bs.modal");
          $("#exampleModal").on("hidden.bs.modal", function () {
            zones = {};
            var url = URL.createObjectURL(newImage);
            document.getElementById("new-floorplan").src = url;

            var reader = new FileReader();
            reader.onload = function () {
              var b64 = reader.result;
              console.log(b64);
              zones = { floorplan: b64 };
            };
            reader.readAsDataURL(newImage);
            reinitializeMapster();
          });
        } catch (error) {}
        console.log(newImage);
      }
    </script>
    <script>
      var selectedZone;
      var option;
      var zones = { floor: 1 };
      img = document.getElementById("new-floorplan");
      $(document).on("click", "img", function (event) {
        if (selectedZone == null) {
          alert("please select a zone");
          return;
        }
        getCoordinates(event);
      });
      $("input[name='zone']").on("change", function () {
        selectedZone = $("input[name='zone']:checked").val();
      });
      function getCoordinates(event) {
        var imgRect = img.getBoundingClientRect();

        // Calculate the offset of the mouse click within the image
        var offsetX = event.clientX - imgRect.left;
        var offsetY = event.clientY - imgRect.top;

        // Update the coordinates displayed in the HTML
        $("#x").text(offsetX.toFixed(0));
        $("#y").text(offsetY.toFixed(0));
        if (
          zones.hasOwnProperty(selectedZone) &&
          "startX" in zones[selectedZone] &&
          "endX" in zones[selectedZone]
        ) {
          //  DELETE all values
          delete zones[selectedZone];
        }
        if (
          zones.hasOwnProperty(selectedZone) &&
          "startX" in zones[selectedZone]
        ) {
          zones[selectedZone].endX = offsetX.toFixed(0);
          zones[selectedZone].endY = offsetY.toFixed(0);
        } else {
          zones[selectedZone] = {
            startX: offsetX.toFixed(0),
            startY: offsetY.toFixed(0),
          };
          console.log(zones);
        }
      }
      $(document).ready(function () {
        $("#update").click(function () {
          run();
          console.log(zones);
          var imagemap = document.getElementById("map");
          var floorplanWrap = document.getElementById("shadecanvas");
          var ctx = floorplanWrap.getContext("2d");
          ctx.clearRect(0, 0, floorplanWrap.width, floorplanWrap.height);
          floorplanWrap.innerHTML = ""; // Clear any existing content
          for (var zone in zones) {
            var zonePosition = zones[zone];
            ctx.beginPath(); // Start a new path
            ctx.fillStyle = "red";
            ctx.imageSmoothingEnabled = false;
            ctx.strokeStyle = "black"; // Set the color of the border
            ctx.lineWidth = 3;
            if (
              zonePosition.startX !== undefined &&
              zonePosition.startY !== undefined &&
              zonePosition.endX !== undefined &&
              zonePosition.endY !== undefined
            ) {
              var startX = (zonePosition.startX / 600) * floorplanWrap.width; // Assuming canvas width is 600
              var startY = (zonePosition.startY / 400) * floorplanWrap.height; // Assuming canvas height is 400
              var endX = (zonePosition.endX / 600) * floorplanWrap.width; // Assuming canvas width is 600
              var endY = (zonePosition.endY / 400) * floorplanWrap.height; // Assuming canvas height is 400
              if (endX > startX) {
                var width = Math.abs(endX - startX);
                if (endY > startY) {
                  var height = Math.abs(endY - startY);
                  ctx.rect(startX, startY, width, height);
                } else {
                  var height = Math.abs(startY - endY);
                  ctx.rect(startX, endY, width, height);
                }
              } else {
                var width = Math.abs(startX - endX);
                if (endY > startY) {
                  var height = Math.abs(endY - startY);
                  ctx.rect(endX, startY, width, height);
                } else {
                  var height = Math.abs(startY - endY);
                  ctx.rect(endX, endY, width, height);
                }
              }
              ctx.fill();
            }

            if (zones.hasOwnProperty(zone)) {
              var existingArea = imagemap.querySelector(
                'area[alt="' + zone + '"]'
              );
              if (existingArea) {
                // Remove the existing area
                existingArea.remove();
              }
              // Create <area> elements for each zone
              var area = document.createElement("area");
              area.setAttribute("shape", "rect");
              area.setAttribute(
                "coords",
                zones[zone].startX +
                  "," +
                  zones[zone].startY +
                  "," +
                  zones[zone].endX +
                  "," +
                  zones[zone].endY
              );
              area.setAttribute("href", "#"); // Set the href attribute as needed
              area.setAttribute("alt", zone);
              area.setAttribute("data-mapkey", zone);
              area.setAttribute("id", zone);

              // Append <new area> element to the <map> element
              imagemap.appendChild(area);
            }
          }
          // Update the usemap attribute of the <img> element
          document
            .getElementById("new-floorplan")
            .setAttribute("usemap", "#imagemap");
          reinitializeMapster();
        });
      });
      $(document).ready(function () {
        $("#submit").click(function (event) {
          event.preventDefault(); // Prevent the default form submission

          var formData = zones;

          // Make the POST request
          fetch("submit", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Network response was not ok");
              }
              return response.json();
            })
            .then((data) => {
              console.log("Success:", data);
              alert("Post created successfully!");
              // Optionally, you can redirect or do something else after successful submission
            })
            .catch((error) => {
              console.error("Error:", error);
              alert("An error occurred while creating the post.");
            });
        });
      });

      reinitializeMapster();
    </script>
    <script>
      function run() {
        var zonedatas = {
          Zone1: {
            sensor1: {
              sensorID: 1,
              sensorType: "temperature",
              graphType: "line",
              category: "temperature",
            },
            sensor2: {
              sensorID: 2,
              sensorType: "humidity",
              graphType: "line",
              category: "humidity",
            },
          },
          Zone2: {
            sensor1: {
              sensorID: 3,
              sensorType: "temperature",
              graphType: "line",
              category: "temperature",
            },
            sensor2: {
              sensorID: 4,
              sensorType: "humidity",
              graphType: "line",
              category: "humidity",
            },
          },
          Zone3: {
            sensor1: {
              sensorID: 5,
              sensorType: "temperature",
              graphType: "line",
              category: "temperature",
            },
          },
        };
        selectedZone = $("input[name='zone']:checked").val();

        for (var zone in zonedatas) {
          if (zone == selectedZone) {
            console.log("selected zone is", zone);
            var datas = zonedatas[zone];
          }
        }
        console.log(datas);
      }
    </script>
  </body>
</html>
